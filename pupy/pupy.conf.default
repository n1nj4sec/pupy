[pupyd]
#listen on all interfaces by default
# address = 192.168.0.1

## Default external address for all transports
# external = 1.2.3.4

transport = ssl
ipv6 = true
logs = false

# Enable/disable internal web server
# Section [webserver]
# This is NOT http wrapper (http)
webserver = true

#Multiple listeners are allowed. Example
#listen = ssl,kc4,ws
listen = ssl

#igd=True allow pupy to make IGD/UPNP requests to get you external IP and
#    add mappings to your local machine from outside
#If enabled, pupy will implicitly expect that pupysh sits behind NAT
#igd = http://ip[:port] will disable autodetect
igd = false

#httpd=true wraps your transport in a HTTP transport.
httpd = false

#dnscnc = localhost:5454 starts the DNS cnc listener on the port 5454.
dnscnc = false
recursor = false

# allow requests to services like ifconfig.co to automatically retrieve public IP
# you should enable this if you planning to use IGD/UPNP
allow_requests_to_external_services = false

use_gnome_keyring=false

ping = 0
ping_timeout = 10

# Enable modules which are marked as QA_DANGEROUS
# These modules may cause the pupy hang or require manual changes
enable_dangerous_modules = false

# Prohibit communication of unregistered cid <-> node pairs
whitelist = false
# ... only if cid found in config ([cids])
# format:
# cid = node1,node2,node3
allow_by_default = true

[dnscnc]
# Allow DNSCNC v1 (legacy)
allow_v1 = true
# Prohibit communication of unregistered cid <-> node pairs
whitelist = false
# ... only if cid found in config ([cids])
# format:
# cid = node1,node2,node3
allow_by_default = true

# Whitelist (if enabled)
[cids]

[listeners]
# Default ports and args
# Ensure ports are different for all enabled listeners
# Or remove listener(s) from pupyd.listen parameter
ssl = 443
obfs3 = 9090
rsa = 9091
ec4 = 80=1234
kc4 = 123=1234
tcp_cleartext = 80=1234
udp_cleartext = 123=1234
ws = 80=8081
http = 80=8080
ecm = 1235

[ssl]
client_cert_required = true

[httpd]
log = true
secret = false

[webserver]
# Serve payloads via tornado web server
listen = 0.0.0.0:9000
# URI for payloads download
payloads = /payloads/
# SSL Certificates if any
# cert = /path/to/cert
# key = /path/to/key
log = true
# If you want static webroot uri uncomment this variable
static_webroot_uri = 
# Set this to true if you want to keep published payloads
preserve_payloads = false

[gen]
format = client
os = windows
arch = x86
external = false
#The command used for packing the 'client' output format (incompatible with py, pyinst, py_oneliner, ps1, ps1_oneliner, rubber_ducky for example)
packer = 
#launcher =
#launcher_args = 

[cmdline]
display_banner = yes
colors = yes
shadow_screen = yes

[paths]
prefer_workdir = no
downloads = data/downloads/%c
memstrings = data/memstrings/%c
searches = data/searches/%c
screenshots = data/screenshots/%c/%t
pcaps = data/pcaps/%c/%t.pcap
logs = data/logs/%c/%t-%M
creds = data/creds
crypto = crypto
wwwroot = data/wwwroot
webstatic = webstatic
records = data/%c
keystrokes = data/keylogger/%c/%t.log
mouseshots = data/mouselogger/%c/%w-%t.png
payload_output = output

[on_connect]

## FORMAT:
## FILTER = ACTION
## FILTER: [SPI|NODE|*...|any...|client_filter]
##   Use '*' and 'any' prefix to apply action to all clients
##   Use SPI or NODE to apply action only to clients with same SPI/NODE id
##   Other values will be used as client_filter argument (like run -f)
## ACTION: [!...|include:section_name|python:trigger_name|module args|]
##   Use '!' prefix to execute shell command
##   Use 'include:' prefix to include commands with specified section name
##   Use 'python:' prefix to execute trigger (from triggers/ folder)

## Example: include actions in section on_connect_notifications
# any = include:on_connect_notifications
# any = python:example_trigger

[on_connect_notifications]
any1 = !notify-send "New session: {hostname} / {os_name}"

[default_viewers]
image_viewer = eog
sound_player = totem
browser = firefox
xdg_open = xdg-open

[mimikatz]
#these are kali 2.0 default path
exe_Win32=/usr/share/mimikatz/Win32/mimikatz.exe
exe_x64=/usr/share/mimikatz/x64/mimikatz.exe

[aliases]
info = get_info
pyexec = pyexec
exec = shell_exec
ps = ps
migrate = migrate
shell=interactive_shell
kill = process_kill
#tasklist = shell_exec 'tasklist /v'
mount = drives
du = download -S

[rubber_ducky]
#path to the encoder.jar file of Rubber-Ducky project (see https://github.com/hak5darren/USB-Rubber-Ducky/blob/master/Encoder/encoder.jar)
encoder_path = TO_FILL
#Path to the keyboard layout for generating inject.bin file (see https://github.com/hak5darren/USB-Rubber-Ducky/tree/master/Encoder/resources)
default_keyboard_layout_path = TO_FILL
